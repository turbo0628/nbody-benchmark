//
// Generated by LLVM NVPTX Back-End
//

.version 6.3
.target sm_75
.address_size 64

	// .globl	runtime_retrieve_and_reset_error_code // -- Begin function runtime_retrieve_and_reset_error_code
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.global .align 1 .b8 _$_str[144] = {79, 117, 116, 32, 111, 102, 32, 67, 85, 68, 65, 32, 112, 114, 101, 45, 97, 108, 108, 111, 99, 97, 116, 101, 100, 32, 109, 101, 109, 111, 114, 121, 46, 10, 67, 111, 110, 115, 105, 100, 101, 114, 32, 117, 115, 105, 110, 103, 32, 116, 105, 46, 105, 110, 105, 116, 40, 100, 101, 118, 105, 99, 101, 95, 109, 101, 109, 111, 114, 121, 95, 102, 114, 97, 99, 116, 105, 111, 110, 61, 48, 46, 57, 41, 32, 111, 114, 32, 116, 105, 46, 105, 110, 105, 116, 40, 100, 101, 118, 105, 99, 101, 95, 109, 101, 109, 111, 114, 121, 95, 71, 66, 61, 52, 41, 32, 116, 111, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 109, 111, 114, 101, 32, 71, 80, 85, 32, 109, 101, 109, 111, 114, 121, 0};
.global .align 1 .b8 _$_str_$_1[11] = {84, 97, 105, 99, 104, 105, 32, 74, 73, 84, 0};
.global .align 1 .b8 _$_str_$_2[21] = {97, 108, 108, 111, 99, 97, 116, 101, 95, 102, 114, 111, 109, 95, 98, 117, 102, 102, 101, 114, 0};
.global .align 1 .b8 _$_str_$_3[28] = {79, 117, 116, 32, 111, 102, 32, 112, 114, 101, 45, 97, 108, 108, 111, 99, 97, 116, 101, 100, 32, 109, 101, 109, 111, 114, 121, 0};
.global .align 1 .b8 _$_str_$_4[37] = {84, 111, 111, 32, 109, 97, 110, 121, 32, 109, 101, 109, 111, 114, 121, 32, 97, 108, 108, 111, 99, 97, 116, 105, 111, 110, 32, 114, 101, 113, 117, 101, 115, 116, 115, 46, 0};
.global .align 1 .b8 _$_str_$_6[28] = {76, 105, 115, 116, 32, 109, 97, 110, 97, 103, 101, 114, 32, 111, 117, 116, 32, 111, 102, 32, 99, 104, 117, 110, 107, 115, 46, 0};
.global .align 1 .b8 _$_str_$_32[40] = {109, 97, 120, 95, 110, 117, 109, 95, 101, 108, 101, 109, 101, 110, 116, 115, 95, 112, 101, 114, 95, 99, 104, 117, 110, 107, 32, 109, 117, 115, 116, 32, 98, 101, 32, 80, 79, 84, 46, 0};
                                        // @runtime_retrieve_and_reset_error_code
.visible .entry runtime_retrieve_and_reset_error_code(
	.param .u64 runtime_retrieve_and_reset_error_code_param_0
)
{
	.reg .b64 	%rd<6>;

// %bb.0:
	ld.param.u64 	%rd1, [runtime_retrieve_and_reset_error_code_param_0];
	cvta.to.global.u64 	%rd2, %rd1;
	ld.global.u64 	%rd3, [%rd2+35216];
	ld.global.u64 	%rd4, [%rd2+35224];
	st.u64 	[%rd4+240], %rd3;
	mov.u64 	%rd5, 0;
	st.global.u64 	[%rd2+35216], %rd5;
	ret;
                                        // -- End function
}
	// .globl	runtime_retrieve_error_message // -- Begin function runtime_retrieve_error_message
.visible .entry runtime_retrieve_error_message(
	.param .u64 runtime_retrieve_error_message_param_0,
	.param .u32 runtime_retrieve_error_message_param_1
)                                       // @runtime_retrieve_error_message
{
	.reg .b64 	%rd<7>;

// %bb.0:
	ld.param.u64 	%rd1, [runtime_retrieve_error_message_param_0];
	cvta.to.global.u64 	%rd2, %rd1;
	ld.param.s32 	%rd3, [runtime_retrieve_error_message_param_1];
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.u8 	%rd5, [%rd4+32904];
	ld.global.u64 	%rd6, [%rd2+35224];
	st.u64 	[%rd6+240], %rd5;
	ret;
                                        // -- End function
}
	// .globl	runtime_retrieve_error_message_argument // -- Begin function runtime_retrieve_error_message_argument
.visible .entry runtime_retrieve_error_message_argument(
	.param .u64 runtime_retrieve_error_message_argument_param_0,
	.param .u32 runtime_retrieve_error_message_argument_param_1
)                                       // @runtime_retrieve_error_message_argument
{
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<7>;

// %bb.0:
	ld.param.u64 	%rd1, [runtime_retrieve_error_message_argument_param_0];
	cvta.to.global.u64 	%rd2, %rd1;
	ld.param.u32 	%r1, [runtime_retrieve_error_message_argument_param_1];
	mul.wide.s32 	%rd3, %r1, 8;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.u64 	%rd5, [%rd4+34952];
	ld.global.u64 	%rd6, [%rd2+35224];
	st.u64 	[%rd6+240], %rd5;
	ret;
                                        // -- End function
}
	// .globl	runtime_ListManager_get_num_active_chunks // -- Begin function runtime_ListManager_get_num_active_chunks
.visible .entry runtime_ListManager_get_num_active_chunks(
	.param .u64 runtime_ListManager_get_num_active_chunks_param_0,
	.param .u64 runtime_ListManager_get_num_active_chunks_param_1
)                                       // @runtime_ListManager_get_num_active_chunks
{
	.reg .pred 	%p<10>;
	.reg .b32 	%r<21>;
	.reg .b64 	%rd<21>;

// %bb.0:
	ld.param.u64 	%rd6, [runtime_ListManager_get_num_active_chunks_param_0];
	ld.param.u64 	%rd7, [runtime_ListManager_get_num_active_chunks_param_1];
	cvta.to.global.u64 	%rd8, %rd7;
	cvta.to.global.u64 	%rd1, %rd6;
	add.s64 	%rd2, %rd8, 32;
	mov.u32 	%r20, 0;
	mov.u64 	%rd20, 0;
LBB3_1:                                 // =>This Inner Loop Header: Depth=1
	add.s64 	%rd9, %rd2, %rd20;
	ld.global.u64 	%rd10, [%rd9+-32];
	setp.ne.s64 	%p1, %rd10, 0;
	selp.u32 	%r4, 1, 0, %p1;
	add.s32 	%r5, %r20, %r4;
	ld.global.u64 	%rd11, [%rd9+-24];
	setp.ne.s64 	%p2, %rd11, 0;
	selp.u32 	%r6, 1, 0, %p2;
	add.s32 	%r7, %r5, %r6;
	ld.global.u64 	%rd12, [%rd9+-16];
	setp.ne.s64 	%p3, %rd12, 0;
	selp.u32 	%r8, 1, 0, %p3;
	add.s32 	%r9, %r7, %r8;
	ld.global.u64 	%rd13, [%rd9+-8];
	setp.ne.s64 	%p4, %rd13, 0;
	selp.u32 	%r10, 1, 0, %p4;
	add.s32 	%r11, %r9, %r10;
	ld.global.u64 	%rd14, [%rd9];
	setp.ne.s64 	%p5, %rd14, 0;
	selp.u32 	%r12, 1, 0, %p5;
	add.s32 	%r13, %r11, %r12;
	ld.global.u64 	%rd15, [%rd9+8];
	setp.ne.s64 	%p6, %rd15, 0;
	selp.u32 	%r14, 1, 0, %p6;
	add.s32 	%r15, %r13, %r14;
	ld.global.u64 	%rd16, [%rd9+16];
	setp.ne.s64 	%p7, %rd16, 0;
	selp.u32 	%r16, 1, 0, %p7;
	add.s32 	%r17, %r15, %r16;
	ld.global.u64 	%rd17, [%rd9+24];
	setp.ne.s64 	%p8, %rd17, 0;
	selp.u32 	%r18, 1, 0, %p8;
	add.s32 	%r20, %r17, %r18;
	add.s64 	%rd20, %rd20, 64;
	cvt.u32.u64 	%r19, %rd20;
	setp.ne.s32 	%p9, %r19, 1048576;
	@%p9 bra 	LBB3_1;
// %bb.2:                               // %_ZN11ListManager21get_num_active_chunksEv.exit
	cvt.u64.u32 	%rd18, %r20;
	ld.global.u64 	%rd19, [%rd1+35224];
	st.u64 	[%rd19+248], %rd18;
	ret;
                                        // -- End function
}
	// .globl	runtime_LLVMRuntime_get_node_allocators // -- Begin function runtime_LLVMRuntime_get_node_allocators
.visible .entry runtime_LLVMRuntime_get_node_allocators(
	.param .u64 runtime_LLVMRuntime_get_node_allocators_param_0,
	.param .u64 runtime_LLVMRuntime_get_node_allocators_param_1,
	.param .u32 runtime_LLVMRuntime_get_node_allocators_param_2
)                                       // @runtime_LLVMRuntime_get_node_allocators
{
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<9>;

// %bb.0:
	ld.param.u64 	%rd1, [runtime_LLVMRuntime_get_node_allocators_param_0];
	ld.param.u64 	%rd2, [runtime_LLVMRuntime_get_node_allocators_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	ld.param.u32 	%r1, [runtime_LLVMRuntime_get_node_allocators_param_2];
	mul.wide.s32 	%rd5, %r1, 8;
	add.s64 	%rd6, %rd3, %rd5;
	ld.global.u64 	%rd7, [%rd6+16472];
	ld.global.u64 	%rd8, [%rd4+35224];
	st.u64 	[%rd8+248], %rd7;
	ret;
                                        // -- End function
}
	// .globl	runtime_LLVMRuntime_get_element_lists // -- Begin function runtime_LLVMRuntime_get_element_lists
.visible .entry runtime_LLVMRuntime_get_element_lists(
	.param .u64 runtime_LLVMRuntime_get_element_lists_param_0,
	.param .u64 runtime_LLVMRuntime_get_element_lists_param_1,
	.param .u32 runtime_LLVMRuntime_get_element_lists_param_2
)                                       // @runtime_LLVMRuntime_get_element_lists
{
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<9>;

// %bb.0:
	ld.param.u64 	%rd1, [runtime_LLVMRuntime_get_element_lists_param_0];
	ld.param.u64 	%rd2, [runtime_LLVMRuntime_get_element_lists_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	ld.param.u32 	%r1, [runtime_LLVMRuntime_get_element_lists_param_2];
	mul.wide.s32 	%rd5, %r1, 8;
	add.s64 	%rd6, %rd3, %rd5;
	ld.global.u64 	%rd7, [%rd6+8280];
	ld.global.u64 	%rd8, [%rd4+35224];
	st.u64 	[%rd8+248], %rd7;
	ret;
                                        // -- End function
}
	// .globl	runtime_LLVMRuntime_get_total_requested_memory // -- Begin function runtime_LLVMRuntime_get_total_requested_memory
.visible .entry runtime_LLVMRuntime_get_total_requested_memory(
	.param .u64 runtime_LLVMRuntime_get_total_requested_memory_param_0,
	.param .u64 runtime_LLVMRuntime_get_total_requested_memory_param_1
)                                       // @runtime_LLVMRuntime_get_total_requested_memory
{
	.reg .b64 	%rd<7>;

// %bb.0:
	ld.param.u64 	%rd1, [runtime_LLVMRuntime_get_total_requested_memory_param_0];
	ld.param.u64 	%rd2, [runtime_LLVMRuntime_get_total_requested_memory_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	ld.global.u64 	%rd5, [%rd3+35240];
	ld.global.u64 	%rd6, [%rd4+35224];
	st.u64 	[%rd6+248], %rd5;
	ret;
                                        // -- End function
}
	// .globl	runtime_NodeManager_get_free_list // -- Begin function runtime_NodeManager_get_free_list
.visible .entry runtime_NodeManager_get_free_list(
	.param .u64 runtime_NodeManager_get_free_list_param_0,
	.param .u64 runtime_NodeManager_get_free_list_param_1
)                                       // @runtime_NodeManager_get_free_list
{
	.reg .b64 	%rd<7>;

// %bb.0:
	ld.param.u64 	%rd1, [runtime_NodeManager_get_free_list_param_0];
	ld.param.u64 	%rd2, [runtime_NodeManager_get_free_list_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	ld.global.u64 	%rd5, [%rd3+24];
	ld.global.u64 	%rd6, [%rd4+35224];
	st.u64 	[%rd6+248], %rd5;
	ret;
                                        // -- End function
}
	// .globl	runtime_NodeManager_get_recycled_list // -- Begin function runtime_NodeManager_get_recycled_list
.visible .entry runtime_NodeManager_get_recycled_list(
	.param .u64 runtime_NodeManager_get_recycled_list_param_0,
	.param .u64 runtime_NodeManager_get_recycled_list_param_1
)                                       // @runtime_NodeManager_get_recycled_list
{
	.reg .b64 	%rd<7>;

// %bb.0:
	ld.param.u64 	%rd1, [runtime_NodeManager_get_recycled_list_param_0];
	ld.param.u64 	%rd2, [runtime_NodeManager_get_recycled_list_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	ld.global.u64 	%rd5, [%rd3+32];
	ld.global.u64 	%rd6, [%rd4+35224];
	st.u64 	[%rd6+248], %rd5;
	ret;
                                        // -- End function
}
	// .globl	runtime_NodeManager_get_data_list // -- Begin function runtime_NodeManager_get_data_list
.visible .entry runtime_NodeManager_get_data_list(
	.param .u64 runtime_NodeManager_get_data_list_param_0,
	.param .u64 runtime_NodeManager_get_data_list_param_1
)                                       // @runtime_NodeManager_get_data_list
{
	.reg .b64 	%rd<7>;

// %bb.0:
	ld.param.u64 	%rd1, [runtime_NodeManager_get_data_list_param_0];
	ld.param.u64 	%rd2, [runtime_NodeManager_get_data_list_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	ld.global.u64 	%rd5, [%rd3+40];
	ld.global.u64 	%rd6, [%rd4+35224];
	st.u64 	[%rd6+248], %rd5;
	ret;
                                        // -- End function
}
	// .globl	runtime_NodeManager_get_free_list_used // -- Begin function runtime_NodeManager_get_free_list_used
.visible .entry runtime_NodeManager_get_free_list_used(
	.param .u64 runtime_NodeManager_get_free_list_used_param_0,
	.param .u64 runtime_NodeManager_get_free_list_used_param_1
)                                       // @runtime_NodeManager_get_free_list_used
{
	.reg .b64 	%rd<7>;

// %bb.0:
	ld.param.u64 	%rd1, [runtime_NodeManager_get_free_list_used_param_0];
	ld.param.u64 	%rd2, [runtime_NodeManager_get_free_list_used_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	ld.global.u32 	%rd5, [%rd3+20];
	ld.global.u64 	%rd6, [%rd4+35224];
	st.u64 	[%rd6+248], %rd5;
	ret;
                                        // -- End function
}
	// .globl	runtime_ListManager_get_num_elements // -- Begin function runtime_ListManager_get_num_elements
.visible .entry runtime_ListManager_get_num_elements(
	.param .u64 runtime_ListManager_get_num_elements_param_0,
	.param .u64 runtime_ListManager_get_num_elements_param_1
)                                       // @runtime_ListManager_get_num_elements
{
	.reg .b64 	%rd<7>;

// %bb.0:
	ld.param.u64 	%rd1, [runtime_ListManager_get_num_elements_param_0];
	ld.param.u64 	%rd2, [runtime_ListManager_get_num_elements_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	ld.global.u32 	%rd5, [%rd3+1048600];
	ld.global.u64 	%rd6, [%rd4+35224];
	st.u64 	[%rd6+248], %rd5;
	ret;
                                        // -- End function
}
	// .globl	runtime_ListManager_get_max_num_elements_per_chunk // -- Begin function runtime_ListManager_get_max_num_elements_per_chunk
.visible .entry runtime_ListManager_get_max_num_elements_per_chunk(
	.param .u64 runtime_ListManager_get_max_num_elements_per_chunk_param_0,
	.param .u64 runtime_ListManager_get_max_num_elements_per_chunk_param_1
)                                       // @runtime_ListManager_get_max_num_elements_per_chunk
{
	.reg .b64 	%rd<7>;

// %bb.0:
	ld.param.u64 	%rd1, [runtime_ListManager_get_max_num_elements_per_chunk_param_0];
	ld.param.u64 	%rd2, [runtime_ListManager_get_max_num_elements_per_chunk_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	ld.global.u64 	%rd5, [%rd3+1048584];
	ld.global.u64 	%rd6, [%rd4+35224];
	st.u64 	[%rd6+248], %rd5;
	ret;
                                        // -- End function
}
	// .globl	runtime_ListManager_get_element_size // -- Begin function runtime_ListManager_get_element_size
.visible .entry runtime_ListManager_get_element_size(
	.param .u64 runtime_ListManager_get_element_size_param_0,
	.param .u64 runtime_ListManager_get_element_size_param_1
)                                       // @runtime_ListManager_get_element_size
{
	.reg .b64 	%rd<7>;

// %bb.0:
	ld.param.u64 	%rd1, [runtime_ListManager_get_element_size_param_0];
	ld.param.u64 	%rd2, [runtime_ListManager_get_element_size_param_1];
	cvta.to.global.u64 	%rd3, %rd2;
	cvta.to.global.u64 	%rd4, %rd1;
	ld.global.u64 	%rd5, [%rd3+1048576];
	ld.global.u64 	%rd6, [%rd4+35224];
	st.u64 	[%rd6+248], %rd5;
	ret;
                                        // -- End function
}
.func taichi_assert_format(
	.param .b64 taichi_assert_format_param_0,
	.param .b32 taichi_assert_format_param_1,
	.param .b64 taichi_assert_format_param_2
)                                       // -- Begin function taichi_assert_format
                                        // @taichi_assert_format
{
	.local .align 8 .b8 	__local_depot14[72];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<13>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<63>;

// %bb.0:
	mov.u64 	%SPL, __local_depot14;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd21, [taichi_assert_format_param_2];
	ld.param.u32 	%r3, [taichi_assert_format_param_1];
	ld.param.u64 	%rd20, [taichi_assert_format_param_0];
	st.u64 	[%SP+0], %rd20;
	st.u32 	[%SP+8], %r3;
	st.u64 	[%SP+16], %rd21;
	mov.u32 	%r4, 0;
	st.u32 	[%SP+24], %r4;
	mov.u64 	%rd22, 0;
	st.u64 	[%SP+32], %rd22;
	ld.u32 	%r5, [%SP+8];
	setp.eq.s32 	%p1, %r5, 0;
	@%p1 bra 	LBB14_2;
	bra.uni 	LBB14_1;
LBB14_1:
	bra.uni 	LBB14_20;
LBB14_2:
	ld.u64 	%rd23, [%SP+0];
	ld.u64 	%rd24, [%rd23+35216];
	setp.ne.s64 	%p2, %rd24, 0;
	@%p2 bra 	LBB14_19;
	bra.uni 	LBB14_3;
LBB14_3:
	ld.u64 	%rd25, [%SP+0];
	add.s64 	%rd1, %rd25, 35208;
	add.u64 	%rd26, %SP, 0;
	st.u64 	[%SP+40], %rd26;
	add.u64 	%rd27, %SP, 16;
	st.u64 	[%SP+48], %rd27;
	add.u64 	%rd28, %SP, 24;
	st.u64 	[%SP+56], %rd28;
	add.u64 	%rd29, %SP, 32;
	st.u64 	[%SP+64], %rd29;
	bra.uni 	LBB14_4;
LBB14_4:                                // =>This Inner Loop Header: Depth=1
	atom.exch.b32 	%r6, [%rd1], 1;
	setp.eq.s32 	%p3, %r6, 1;
	@%p3 bra 	LBB14_4;
	bra.uni 	LBB14_5;
LBB14_5:                                // %mutex_lock_i32.exit.i.i.i.i
	membar.gl;
	add.u64 	%rd2, %SP, 40;
	ld.u64 	%rd30, [%SP+40];
	ld.u64 	%rd31, [%rd30];
	add.s64 	%rd3, %rd31, 35216;
	ld.u64 	%rd32, [%rd31+35216];
	setp.ne.s64 	%p4, %rd32, 0;
	@%p4 bra 	LBB14_18;
	bra.uni 	LBB14_6;
LBB14_6:
	mov.u64 	%rd34, 1;
	st.u64 	[%rd3], %rd34;
	ld.u64 	%rd35, [%rd2];
	ld.u64 	%rd36, [%rd35];
	add.s64 	%rd4, %rd36, 32904;
	mov.u64 	%rd58, 0;
	mov.pred 	%p5, 0;
	@%p5 bra 	LBB14_8;
	bra.uni 	LBB14_7;
LBB14_7:                                // %loadstoreloop
                                        // =>This Inner Loop Header: Depth=1
	add.s64 	%rd37, %rd4, %rd58;
	mov.u16 	%rs1, 0;
	st.u8 	[%rd37], %rs1;
	add.s64 	%rd58, %rd58, 1;
	setp.lt.u64 	%p6, %rd58, 2048;
	@%p6 bra 	LBB14_7;
	bra.uni 	LBB14_8;
LBB14_8:                                // %split
	ld.u64 	%rd39, [%rd2];
	ld.u64 	%rd40, [%rd39];
	add.s64 	%rd7, %rd40, 32904;
	ld.u64 	%rd41, [%SP+48];
	ld.u64 	%rd8, [%rd41];
	ld.u8 	%rs2, [%rd8];
	setp.eq.s16 	%p7, %rs2, 0;
	mov.u64 	%rd61, 0;
	@%p7 bra 	LBB14_12;
	bra.uni 	LBB14_9;
LBB14_9:                                // %.lr.ph.i.i.i.i.i.i.preheader
	mov.u64 	%rd60, 0;
	mov.u64 	%rd59, %rd8;
	bra.uni 	LBB14_10;
LBB14_10:                               // %.lr.ph.i.i.i.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	add.s64 	%rd60, %rd60, 1;
	add.s64 	%rd12, %rd59, 1;
	ld.u8 	%rs3, [%rd59+1];
	setp.ne.s16 	%p8, %rs3, 0;
	mov.u64 	%rd59, %rd12;
	@%p8 bra 	LBB14_10;
	bra.uni 	LBB14_11;
LBB14_11:                               // %taichi_strlen.exit.i.i.i.i.i
	min.u64 	%rd61, %rd60, 2047;
	bra.uni 	LBB14_12;
LBB14_12:                               // %taichi_strlen.exit.thread.i.i.i.i.i
	setp.eq.s64 	%p9, %rd61, 0;
	mov.u64 	%rd62, 0;
	@%p9 bra 	LBB14_14;
	bra.uni 	LBB14_13;
LBB14_13:                               // %loop-memcpy-expansion
                                        // =>This Inner Loop Header: Depth=1
	add.s64 	%rd44, %rd8, %rd62;
	ld.u8 	%rs4, [%rd44];
	add.s64 	%rd45, %rd7, %rd62;
	st.u8 	[%rd45], %rs4;
	add.s64 	%rd62, %rd62, 1;
	setp.lt.u64 	%p10, %rd62, %rd61;
	@%p10 bra 	LBB14_13;
	bra.uni 	LBB14_14;
LBB14_14:                               // %post-loop-memcpy-expansion
	add.u64 	%rd46, %SP, 40;
	add.s64 	%rd18, %rd46, 16;
	ld.u64 	%rd47, [%SP+56];
	ld.u32 	%r7, [%rd47];
	setp.lt.s32 	%p11, %r7, 1;
	@%p11 bra 	LBB14_18;
	bra.uni 	LBB14_15;
LBB14_15:                               // %.lr.ph.i.i.i.i.i
	add.u64 	%rd48, %SP, 40;
	add.s64 	%rd19, %rd48, 24;
	mov.u32 	%r11, 0;
	bra.uni 	LBB14_16;
LBB14_16:                               // =>This Inner Loop Header: Depth=1
	ld.u64 	%rd49, [%rd19];
	ld.u64 	%rd50, [%rd49];
	mul.wide.u32 	%rd51, %r11, 8;
	add.s64 	%rd52, %rd50, %rd51;
	ld.u64 	%rd53, [%rd52];
	ld.u64 	%rd54, [%rd2];
	ld.u64 	%rd55, [%rd54];
	add.s64 	%rd56, %rd55, %rd51;
	st.u64 	[%rd56+34952], %rd53;
	add.s32 	%r11, %r11, 1;
	ld.u64 	%rd57, [%rd18];
	ld.u32 	%r9, [%rd57];
	setp.lt.s32 	%p12, %r11, %r9;
	@%p12 bra 	LBB14_16;
	bra.uni 	LBB14_17;
LBB14_17:                               // %_Z11locked_taskIZ20taichi_assert_formatE3_dl__0EvPvRKT_.exit.loopexit
	bra.uni 	LBB14_18;
LBB14_18:                               // %_Z11locked_taskIZ20taichi_assert_formatE3_dl__0EvPvRKT_.exit
	membar.gl;
	atom.exch.b32 	%r10, [%rd1], 0;
	bra.uni 	LBB14_19;
LBB14_19:
	// begin inline asm
	exit;
	// end inline asm
	bra.uni 	LBB14_20;
LBB14_20:
	ret;
                                        // -- End function
}
	// .globl	runtime_memory_allocate_aligned // -- Begin function runtime_memory_allocate_aligned
.visible .entry runtime_memory_allocate_aligned(
	.param .u64 runtime_memory_allocate_aligned_param_0,
	.param .u64 runtime_memory_allocate_aligned_param_1,
	.param .u64 runtime_memory_allocate_aligned_param_2
)                                       // @runtime_memory_allocate_aligned
{
	.reg .pred 	%p<8>;
	.reg .b16 	%rs<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<41>;

// %bb.0:
	ld.param.u64 	%rd16, [runtime_memory_allocate_aligned_param_2];
	ld.param.u64 	%rd15, [runtime_memory_allocate_aligned_param_1];
	ld.param.u64 	%rd14, [runtime_memory_allocate_aligned_param_0];
	cvta.to.global.u64 	%rd1, %rd14;
	ld.global.u8 	%rs1, [%rd1];
	and.b16  	%rs2, %rs1, 1;
	setp.eq.b16 	%p1, %rs2, 1;
	mov.pred 	%p2, 0;
	xor.pred  	%p3, %p1, %p2;
	not.pred 	%p4, %p3;
	@%p4 bra 	LBB15_10;
	bra.uni 	LBB15_1;
LBB15_10:
	ld.global.u64 	%rd34, [%rd1+32];
	ld.global.u64 	%rd35, [%rd1+64];
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd35;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd15;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd16;
	.param .b64 retval0;
	prototype_2 : .callprototype (.param .b64 _) _ (.param .b64 _, .param .b64 _, .param .b64 _);
	call (retval0), 
	%rd34, 
	(
	param0, 
	param1, 
	param2
	)
	, prototype_2;
	ld.param.b64 	%rd40, [retval0+0];
	} // callseq 2
	bra.uni 	LBB15_11;
LBB15_1:
	add.s64 	%rd17, %rd1, 35232;
	cvta.global.u64 	%rd2, %rd17;
LBB15_2:                                // =>This Inner Loop Header: Depth=1
	atom.exch.b32 	%r2, [%rd2], 1;
	setp.eq.s32 	%p5, %r2, 1;
	@%p5 bra 	LBB15_2;
// %bb.3:                               // %mutex_lock_i32.exit.i.i.i.i.i.i
	membar.gl;
	ld.global.u64 	%rd3, [%rd1+16];
	add.s64 	%rd18, %rd16, %rd3;
	add.s64 	%rd4, %rd18, -1;
	or.b64  	%rd19, %rd4, %rd16;
	and.b64  	%rd20, %rd19, -4294967296;
	setp.ne.s64 	%p6, %rd20, 0;
	@%p6 bra 	LBB15_5;
	bra.uni 	LBB15_4;
LBB15_5:
	rem.u64 	%rd38, %rd4, %rd16;
	bra.uni 	LBB15_6;
LBB15_4:
	cvt.u32.u64 	%r3, %rd16;
	cvt.u32.u64 	%r4, %rd4;
	rem.u32 	%r5, %r4, %r3;
	cvt.u64.u32 	%rd38, %r5;
LBB15_6:
	not.b64 	%rd21, %rd38;
	add.s64 	%rd8, %rd21, %rd16;
	add.s64 	%rd22, %rd8, %rd15;
	add.s64 	%rd9, %rd3, %rd22;
	ld.global.u64 	%rd23, [%rd1+24];
	setp.gt.u64 	%p7, %rd9, %rd23;
	@%p7 bra 	LBB15_8;
	bra.uni 	LBB15_7;
LBB15_8:
	membar.gl;
	atom.exch.b32 	%r9, [%rd2], 0;
	mov.u64 	%rd25, _$_str;
	cvta.global.u64 	%rd26, %rd25;
	mov.u64 	%rd27, _$_str_$_1;
	cvta.global.u64 	%rd28, %rd27;
	mov.u64 	%rd29, _$_str_$_2;
	cvta.global.u64 	%rd30, %rd29;
	mov.u32 	%r10, 0;
	mov.u64 	%rd31, 1;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd28;
	.param .b32 param2;
	st.param.b32 	[param2+0], %r10;
	.param .b64 param3;
	st.param.b64 	[param3+0], %rd30;
	.param .b64 param4;
	st.param.b64 	[param4+0], %rd31;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 0
	mov.u64 	%rd40, 0;
	bra.uni 	LBB15_9;
LBB15_7:                                // %_Z11locked_taskIZN11LLVMRuntime20allocate_from_bufferEmmE3_dl__1EvPvRKT_.exit.i.i
	add.s64 	%rd40, %rd3, %rd8;
	st.global.u64 	[%rd1+16], %rd9;
	membar.gl;
	atom.exch.b32 	%r7, [%rd2], 0;
	mov.u32 	%r10, 1;
LBB15_9:                                // %_ZN11LLVMRuntime20allocate_from_bufferEmm.exit.i
	mov.u64 	%rd32, _$_str_$_3;
	cvta.global.u64 	%rd33, %rd32;
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd14;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r10;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd33;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 1
LBB15_11:                               // %_ZN11LLVMRuntime16allocate_alignedEmm.exit
	ld.global.u64 	%rd37, [%rd1+35224];
	st.u64 	[%rd37+248], %rd40;
	ret;
                                        // -- End function
}
	// .globl	runtime_get_mem_req_queue // -- Begin function runtime_get_mem_req_queue
.visible .entry runtime_get_mem_req_queue(
	.param .u64 runtime_get_mem_req_queue_param_0
)                                       // @runtime_get_mem_req_queue
{
	.reg .b64 	%rd<5>;

// %bb.0:
	ld.param.u64 	%rd1, [runtime_get_mem_req_queue_param_0];
	cvta.to.global.u64 	%rd2, %rd1;
	ld.global.u64 	%rd3, [%rd2+32872];
	ld.global.u64 	%rd4, [%rd2+35224];
	st.u64 	[%rd4], %rd3;
	ret;
                                        // -- End function
}
	// .globl	runtime_initialize // -- Begin function runtime_initialize
.visible .entry runtime_initialize(
	.param .u64 runtime_initialize_param_0,
	.param .u64 runtime_initialize_param_1,
	.param .u64 runtime_initialize_param_2,
	.param .u64 runtime_initialize_param_3,
	.param .u32 runtime_initialize_param_4,
	.param .u32 runtime_initialize_param_5,
	.param .u64 runtime_initialize_param_6,
	.param .u64 runtime_initialize_param_7,
	.param .u64 runtime_initialize_param_8
)                                       // @runtime_initialize
{
	.reg .pred 	%p<23>;
	.reg .b16 	%rs<8>;
	.reg .b32 	%r<39>;
	.reg .b64 	%rd<129>;

// %bb.0:
	ld.param.u64 	%rd41, [runtime_initialize_param_8];
	ld.param.u64 	%rd40, [runtime_initialize_param_7];
	ld.param.u64 	%rd39, [runtime_initialize_param_6];
	ld.param.u64 	%rd38, [runtime_initialize_param_3];
	ld.param.u64 	%rd37, [runtime_initialize_param_2];
	ld.param.u64 	%rd36, [runtime_initialize_param_1];
	ld.param.u64 	%rd35, [runtime_initialize_param_0];
	cvta.to.global.u64 	%rd1, %rd35;
	add.s64 	%rd2, %rd38, %rd37;
	setp.eq.s64 	%p1, %rd37, 0;
	@%p1 bra 	LBB17_2;
// %bb.1:
	add.s64 	%rd120, %rd38, 36864;
	mov.u64 	%rd119, %rd38;
	bra.uni 	LBB17_3;
LBB17_2:
	mov.u64 	%rd42, 35256;
	mov.u64 	%rd43, 128;
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd36;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd42;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd43;
	.param .b64 retval0;
	prototype_3 : .callprototype (.param .b64 _) _ (.param .b64 _, .param .b64 _, .param .b64 _);
	call (retval0), 
	%rd39, 
	(
	param0, 
	param1, 
	param2
	)
	, prototype_3;
	ld.param.b64 	%rd119, [retval0+0];
	} // callseq 3
	mov.u64 	%rd120, %rd38;
LBB17_3:
	setp.ne.s64 	%p2, %rd37, 0;
	selp.u16 	%rs1, 1, 0, %p2;
	st.u8 	[%rd119], %rs1;
	st.u64 	[%rd119+16], %rd120;
	st.u64 	[%rd119+24], %rd2;
	st.u64 	[%rd119+35224], %rd35;
	st.global.u64 	[%rd1], %rd119;
	st.u64 	[%rd119+32], %rd39;
	st.u64 	[%rd119+48], %rd40;
	st.u64 	[%rd119+56], %rd41;
	st.u64 	[%rd119+64], %rd36;
	mov.u64 	%rd122, 0;
	st.u64 	[%rd119+35240], %rd122;
	ld.u8 	%rs2, [%rd119];
	and.b16  	%rs3, %rs2, 1;
	setp.eq.b16 	%p3, %rs3, 1;
	mov.pred 	%p4, 0;
	xor.pred  	%p5, %p3, %p4;
	not.pred 	%p6, %p5;
	add.s64 	%rd115, %rd119, 35232;
	mov.u64 	%rd116, _$_str_$_3;
	mov.u64 	%rd118, 4096;
	@%p6 bra 	LBB17_10;
	bra.uni 	LBB17_4;
LBB17_10:
	mov.u64 	%rd64, 2097160;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd36;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd64;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd118;
	.param .b64 retval0;
	prototype_6 : .callprototype (.param .b64 _) _ (.param .b64 _, .param .b64 _, .param .b64 _);
	call (retval0), 
	%rd39, 
	(
	param0, 
	param1, 
	param2
	)
	, prototype_6;
	ld.param.b64 	%rd122, [retval0+0];
	} // callseq 6
	bra.uni 	LBB17_11;
LBB17_4:
	mov.u32 	%r34, 0;
LBB17_5:                                // =>This Inner Loop Header: Depth=1
	atom.exch.b32 	%r11, [%rd115], 1;
	setp.eq.s32 	%p7, %r11, 1;
	@%p7 bra 	LBB17_5;
// %bb.6:                               // %mutex_lock_i32.exit.i.i.i.i.i.i46
	membar.gl;
	ld.u64 	%rd47, [%rd119+16];
	add.s64 	%rd48, %rd47, -1;
	or.b64  	%rd49, %rd48, -4096;
	xor.b64  	%rd50, %rd49, 4095;
	add.s64 	%rd10, %rd47, %rd50;
	add.s64 	%rd11, %rd10, 2101256;
	ld.u64 	%rd51, [%rd119+24];
	setp.gt.u64 	%p8, %rd11, %rd51;
	@%p8 bra 	LBB17_8;
	bra.uni 	LBB17_7;
LBB17_8:
	membar.gl;
	atom.exch.b32 	%r15, [%rd115], 0;
	mov.u64 	%rd55, _$_str;
	cvta.global.u64 	%rd56, %rd55;
	mov.u64 	%rd57, _$_str_$_1;
	cvta.global.u64 	%rd58, %rd57;
	mov.u64 	%rd59, _$_str_$_2;
	cvta.global.u64 	%rd60, %rd59;
	mov.u64 	%rd61, 1;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd56;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd58;
	.param .b32 param2;
	st.param.b32 	[param2+0], %r34;
	.param .b64 param3;
	st.param.b64 	[param3+0], %rd60;
	.param .b64 param4;
	st.param.b64 	[param4+0], %rd61;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 4
	bra.uni 	LBB17_9;
LBB17_7:                                // %_Z11locked_taskIZN11LLVMRuntime20allocate_from_bufferEmmE3_dl__1EvPvRKT_.exit.i.i47
	add.s64 	%rd122, %rd10, 4096;
	st.u64 	[%rd119+16], %rd11;
	membar.gl;
	atom.exch.b32 	%r13, [%rd115], 0;
	mov.u32 	%r34, 1;
LBB17_9:                                // %_ZN11LLVMRuntime20allocate_from_bufferEmm.exit.i49
	cvta.global.u64 	%rd63, %rd116;
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd119;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r34;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd63;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 5
LBB17_11:                               // %_ZN11LLVMRuntime16allocate_alignedEmm.exit51
	ld.param.u32 	%r10, [runtime_initialize_param_5];
	st.u64 	[%rd119+32872], %rd122;
	ld.u8 	%rs4, [%rd119];
	and.b16  	%rs5, %rs4, 1;
	setp.eq.b16 	%p9, %rs5, 1;
	xor.pred  	%p11, %p9, %p4;
	not.pred 	%p12, %p11;
	@%p12 bra 	LBB17_17;
	bra.uni 	LBB17_12;
LBB17_17:
	ld.u64 	%rd85, [%rd119+32];
	ld.u64 	%rd86, [%rd119+64];
	mov.u64 	%rd87, 1048576;
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd86;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd87;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd118;
	.param .b64 retval0;
	prototype_9 : .callprototype (.param .b64 _) _ (.param .b64 _, .param .b64 _, .param .b64 _);
	call (retval0), 
	%rd85, 
	(
	param0, 
	param1, 
	param2
	)
	, prototype_9;
	ld.param.b64 	%rd124, [retval0+0];
	} // callseq 9
	bra.uni 	LBB17_18;
LBB17_12:                               // =>This Inner Loop Header: Depth=1
	atom.exch.b32 	%r16, [%rd115], 1;
	setp.eq.s32 	%p13, %r16, 1;
	@%p13 bra 	LBB17_12;
// %bb.13:                              // %mutex_lock_i32.exit.i.i.i.i.i.i52
	membar.gl;
	ld.u64 	%rd68, [%rd119+16];
	add.s64 	%rd69, %rd68, -1;
	or.b64  	%rd70, %rd69, -4096;
	xor.b64  	%rd71, %rd70, 4095;
	add.s64 	%rd16, %rd68, %rd71;
	add.s64 	%rd17, %rd16, 1052672;
	ld.u64 	%rd72, [%rd119+24];
	setp.gt.u64 	%p14, %rd17, %rd72;
	@%p14 bra 	LBB17_15;
	bra.uni 	LBB17_14;
LBB17_15:
	membar.gl;
	atom.exch.b32 	%r20, [%rd115], 0;
	mov.u64 	%rd76, _$_str;
	cvta.global.u64 	%rd77, %rd76;
	mov.u64 	%rd78, _$_str_$_1;
	cvta.global.u64 	%rd79, %rd78;
	mov.u64 	%rd80, _$_str_$_2;
	cvta.global.u64 	%rd81, %rd80;
	mov.u32 	%r35, 0;
	mov.u64 	%rd82, 1;
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd77;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd79;
	.param .b32 param2;
	st.param.b32 	[param2+0], %r35;
	.param .b64 param3;
	st.param.b64 	[param3+0], %rd81;
	.param .b64 param4;
	st.param.b64 	[param4+0], %rd82;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 7
	mov.u64 	%rd124, 0;
	bra.uni 	LBB17_16;
LBB17_14:                               // %_Z11locked_taskIZN11LLVMRuntime20allocate_from_bufferEmmE3_dl__1EvPvRKT_.exit.i.i53
	add.s64 	%rd124, %rd16, 4096;
	st.u64 	[%rd119+16], %rd17;
	membar.gl;
	atom.exch.b32 	%r18, [%rd115], 0;
	mov.u32 	%r35, 1;
LBB17_16:                               // %_ZN11LLVMRuntime20allocate_from_bufferEmm.exit.i55
	cvta.global.u64 	%rd84, %rd116;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd119;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r35;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd84;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 8
LBB17_18:                               // %_ZN11LLVMRuntime16allocate_alignedEmm.exit57
	st.u64 	[%rd119+32856], %rd124;
	st.u32 	[%rd119+35236], %r10;
	mul.wide.s32 	%rd22, %r10, 20;
	ld.u8 	%rs6, [%rd119];
	and.b16  	%rs7, %rs6, 1;
	setp.eq.b16 	%p15, %rs7, 1;
	xor.pred  	%p17, %p15, %p4;
	not.pred 	%p18, %p17;
	@%p18 bra 	LBB17_24;
	bra.uni 	LBB17_19;
LBB17_24:
	ld.u64 	%rd109, [%rd119+32];
	ld.u64 	%rd110, [%rd119+64];
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd110;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd22;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd118;
	.param .b64 retval0;
	prototype_12 : .callprototype (.param .b64 _) _ (.param .b64 _, .param .b64 _, .param .b64 _);
	call (retval0), 
	%rd109, 
	(
	param0, 
	param1, 
	param2
	)
	, prototype_12;
	ld.param.b64 	%rd126, [retval0+0];
	} // callseq 12
	bra.uni 	LBB17_25;
LBB17_19:                               // =>This Inner Loop Header: Depth=1
	atom.exch.b32 	%r21, [%rd115], 1;
	setp.eq.s32 	%p19, %r21, 1;
	@%p19 bra 	LBB17_19;
// %bb.20:                              // %mutex_lock_i32.exit.i.i.i.i.i.i
	membar.gl;
	ld.u64 	%rd23, [%rd119+16];
	add.s64 	%rd91, %rd23, -1;
	or.b64  	%rd92, %rd91, -4096;
	xor.b64  	%rd24, %rd92, 4095;
	add.s64 	%rd93, %rd24, %rd22;
	add.s64 	%rd94, %rd23, %rd93;
	add.s64 	%rd25, %rd94, 4096;
	ld.u64 	%rd95, [%rd119+24];
	setp.gt.u64 	%p20, %rd25, %rd95;
	@%p20 bra 	LBB17_22;
	bra.uni 	LBB17_21;
LBB17_22:
	membar.gl;
	atom.exch.b32 	%r25, [%rd115], 0;
	mov.u64 	%rd100, _$_str;
	cvta.global.u64 	%rd101, %rd100;
	mov.u64 	%rd102, _$_str_$_1;
	cvta.global.u64 	%rd103, %rd102;
	mov.u64 	%rd104, _$_str_$_2;
	cvta.global.u64 	%rd105, %rd104;
	mov.u32 	%r36, 0;
	mov.u64 	%rd106, 1;
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd101;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd103;
	.param .b32 param2;
	st.param.b32 	[param2+0], %r36;
	.param .b64 param3;
	st.param.b64 	[param3+0], %rd105;
	.param .b64 param4;
	st.param.b64 	[param4+0], %rd106;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 10
	mov.u64 	%rd126, 0;
	bra.uni 	LBB17_23;
LBB17_21:                               // %_Z11locked_taskIZN11LLVMRuntime20allocate_from_bufferEmmE3_dl__1EvPvRKT_.exit.i.i
	add.s64 	%rd96, %rd23, %rd24;
	add.s64 	%rd126, %rd96, 4096;
	st.u64 	[%rd119+16], %rd25;
	membar.gl;
	atom.exch.b32 	%r23, [%rd115], 0;
	mov.u32 	%r36, 1;
LBB17_23:                               // %_ZN11LLVMRuntime20allocate_from_bufferEmm.exit.i
	cvta.global.u64 	%rd108, %rd116;
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd119;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r36;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd108;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 11
LBB17_25:                               // %_ZN11LLVMRuntime16allocate_alignedEmm.exit
	st.u64 	[%rd119+32864], %rd126;
	ld.u32 	%r26, [%rd119+35236];
	setp.lt.s32 	%p21, %r26, 1;
	@%p21 bra 	LBB17_29;
// %bb.26:                              // %.lr.ph.preheader
	ld.param.u32 	%r9, [runtime_initialize_param_4];
	mul.lo.s32 	%r37, %r9, -654889581;
	mov.u32 	%r38, 1;
	mov.u64 	%rd127, 0;
	mov.u32 	%r28, 362436069;
	mov.u32 	%r29, 521288629;
LBB17_27:                               // %.lr.ph
                                        // =>This Inner Loop Header: Depth=1
	add.s64 	%rd114, %rd126, %rd127;
	st.u32 	[%rd114], %r37;
	st.u32 	[%rd114+4], %r28;
	st.u32 	[%rd114+8], %r29;
	mov.u32 	%r30, 88675123;
	st.u32 	[%rd114+12], %r30;
	mov.u32 	%r31, 0;
	st.u32 	[%rd114+16], %r31;
	ld.u32 	%r32, [%rd119+35236];
	setp.ge.s32 	%p22, %r38, %r32;
	@%p22 bra 	LBB17_29;
// %bb.28:                              // %.lr.ph..lr.ph_crit_edge
                                        //   in Loop: Header=BB17_27 Depth=1
	ld.u64 	%rd126, [%rd119+32864];
	add.s32 	%r38, %r38, 1;
	add.s64 	%rd127, %rd127, 20;
	add.s32 	%r37, %r37, -654889581;
	bra.uni 	LBB17_27;
LBB17_29:                               // %._crit_edge
	ret;
                                        // -- End function
}
	// .globl	runtime_initialize_snodes // -- Begin function runtime_initialize_snodes
.visible .entry runtime_initialize_snodes(
	.param .u64 runtime_initialize_snodes_param_0,
	.param .u64 runtime_initialize_snodes_param_1,
	.param .u32 runtime_initialize_snodes_param_2,
	.param .u32 runtime_initialize_snodes_param_3,
	.param .u32 runtime_initialize_snodes_param_4,
	.param .u64 runtime_initialize_snodes_param_5,
	.param .u64 runtime_initialize_snodes_param_6,
	.param .u8 runtime_initialize_snodes_param_7
)                                       // @runtime_initialize_snodes
{
	.local .align 8 .b8 	__local_depot18[56];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<28>;
	.reg .b16 	%rs<8>;
	.reg .b32 	%r<45>;
	.reg .b64 	%rd<151>;

// %bb.0:
	mov.u64 	%SPL, __local_depot18;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u8 	%rs1, [runtime_initialize_snodes_param_7];
	and.b16  	%rs2, %rs1, 1;
	setp.eq.b16 	%p1, %rs2, 1;
	ld.param.u64 	%rd147, [runtime_initialize_snodes_param_6];
	ld.param.u64 	%rd30, [runtime_initialize_snodes_param_0];
	cvta.to.global.u64 	%rd1, %rd30;
	ld.param.u32 	%r9, [runtime_initialize_snodes_param_4];
	ld.param.u64 	%rd33, [runtime_initialize_snodes_param_5];
	mul.wide.s32 	%rd34, %r9, 8;
	add.s64 	%rd35, %rd1, %rd34;
	st.global.u64 	[%rd35+4168], %rd33;
	st.global.u64 	[%rd35+72], %rd147;
	@%p1 bra 	LBB18_30;
// %bb.1:                               // %.preheader
	ld.param.u32 	%r8, [runtime_initialize_snodes_param_3];
	ld.param.u32 	%r7, [runtime_initialize_snodes_param_2];
	add.u64 	%rd2, %SPL, 8;
	setp.lt.s32 	%p2, %r8, 1;
	mov.u32 	%r44, 1;
	mov.u64 	%rd138, _$_str_$_3;
	mov.u64 	%rd139, _$_str;
	mov.u64 	%rd140, _$_str_$_1;
	mov.u64 	%rd141, _$_str_$_2;
	mov.u32 	%r41, 0;
	mov.u64 	%rd142, 1;
	mov.u64 	%rd150, 0;
	mov.u64 	%rd144, _$_str_$_4;
	@%p2 bra 	LBB18_14;
// %bb.2:                               // %.lr.ph
	add.s64 	%rd3, %rd35, 72;
	add.s32 	%r1, %r8, %r7;
	add.s64 	%rd36, %rd1, 35232;
	cvta.global.u64 	%rd5, %rd36;
	mov.pred 	%p4, 0;
	mov.u32 	%r42, %r7;
	bra.uni 	LBB18_3;
LBB18_9:                                //   in Loop: Header=BB18_3 Depth=1
	ld.global.u64 	%rd54, [%rd1+32872];
	add.s64 	%rd55, %rd54, 2097152;
	atom.add.u32 	%r15, [%rd55], 1;
	setp.lt.s32 	%p9, %r15, 65537;
	selp.u32 	%r16, 1, 0, %p9;
	cvta.global.u64 	%rd57, %rd144;
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd30;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r16;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd57;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 15
	ld.global.u64 	%rd58, [%rd1+32872];
	mul.wide.s32 	%rd59, %r15, 32;
	add.s64 	%rd60, %rd58, %rd59;
	st.volatile.u64 	[%SP+0], %rd60;
	ld.volatile.u64 	%rd61, [%SP+0];
	atom.exch.b64 	%rd62, [%rd61], 1048616;
	ld.volatile.u64 	%rd63, [%SP+0];
	add.s64 	%rd64, %rd63, 8;
	atom.exch.b64 	%rd65, [%rd64], 4096;
	ld.volatile.u64 	%rd66, [%SP+0];
	ld.u64 	%rd67, [%rd66+16];
	setp.ne.s64 	%p10, %rd67, 0;
	@%p10 bra 	LBB18_11;
	bra.uni 	LBB18_10;
LBB18_11:                               // %._crit_edge.i.i
                                        //   in Loop: Header=BB18_3 Depth=1
	ld.volatile.u64 	%rd70, [%SP+0];
	ld.u64 	%rd146, [%rd70+16];
LBB18_12:                               // %_ZN11LLVMRuntime6createI11ListManagerJRPS_miEEEPT_DpOT0_.exit
                                        //   in Loop: Header=BB18_3 Depth=1
	mov.u64 	%rd71, 48;
	st.u64 	[%rd146+1048576], %rd71;
	mov.u64 	%rd72, 65536;
	st.u64 	[%rd146+1048584], %rd72;
	st.u64 	[%rd146+1048608], %rd30;
	mov.u64 	%rd73, _$_str_$_32;
	cvta.global.u64 	%rd74, %rd73;
	mov.u32 	%r17, 1;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd30;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r17;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd74;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 16
	mov.u32 	%r18, 0;
	st.u32 	[%rd146+1048600], %r18;
	mov.u32 	%r19, 16;
	st.v2.u32 	[%rd146+1048592], {%r19, %r18};
	mul.wide.s32 	%rd75, %r42, 8;
	add.s64 	%rd76, %rd1, %rd75;
	st.global.u64 	[%rd76+8280], %rd146;
	add.s32 	%r42, %r42, 1;
	setp.lt.s32 	%p12, %r42, %r1;
	@%p12 bra 	LBB18_3;
	bra.uni 	LBB18_13;
LBB18_3:                                // =>This Loop Header: Depth=1
                                        //     Child Loop BB18_4 Depth 2
                                        //     Child Loop BB18_10 Depth 2
	add.s64 	%rd37, %rd1, 35240;
	atom.global.add.u64 	%rd38, [%rd37], 1048616;
	ld.global.u8 	%rs3, [%rd1];
	and.b16  	%rs4, %rs3, 1;
	setp.eq.b16 	%p3, %rs4, 1;
	xor.pred  	%p5, %p3, %p4;
	not.pred 	%p6, %p5;
	@%p6 bra 	LBB18_9;
LBB18_4:                                // %.preheader25
                                        //   Parent Loop BB18_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	atom.exch.b32 	%r10, [%rd5], 1;
	setp.eq.s32 	%p7, %r10, 1;
	@%p7 bra 	LBB18_4;
// %bb.5:                               // %mutex_lock_i32.exit.i.i.i.i.i.i.i
                                        //   in Loop: Header=BB18_3 Depth=1
	membar.gl;
	ld.global.u64 	%rd39, [%rd1+16];
	add.s64 	%rd40, %rd39, -1;
	or.b64  	%rd41, %rd40, -4096;
	xor.b64  	%rd42, %rd41, 4095;
	add.s64 	%rd6, %rd39, %rd42;
	add.s64 	%rd7, %rd6, 1052712;
	ld.global.u64 	%rd43, [%rd1+24];
	setp.gt.u64 	%p8, %rd7, %rd43;
	@%p8 bra 	LBB18_7;
	bra.uni 	LBB18_6;
LBB18_7:                                //   in Loop: Header=BB18_3 Depth=1
	membar.gl;
	atom.exch.b32 	%r14, [%rd5], 0;
	cvta.global.u64 	%rd46, %rd139;
	cvta.global.u64 	%rd48, %rd140;
	cvta.global.u64 	%rd50, %rd141;
	mov.u32 	%r43, 0;
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd46;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd48;
	.param .b32 param2;
	st.param.b32 	[param2+0], %r43;
	.param .b64 param3;
	st.param.b64 	[param3+0], %rd50;
	.param .b64 param4;
	st.param.b64 	[param4+0], %rd142;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 13
	mov.u64 	%rd146, 0;
	bra.uni 	LBB18_8;
LBB18_10:                               // %.lr.ph.i.i
                                        //   Parent Loop BB18_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	membar.sys;
	ld.volatile.u64 	%rd68, [%SP+0];
	ld.u64 	%rd69, [%rd68+16];
	setp.eq.s64 	%p11, %rd69, 0;
	@%p11 bra 	LBB18_10;
	bra.uni 	LBB18_11;
LBB18_6:                                // %_Z11locked_taskIZN11LLVMRuntime20allocate_from_bufferEmmE3_dl__1EvPvRKT_.exit.i.i.i
                                        //   in Loop: Header=BB18_3 Depth=1
	add.s64 	%rd146, %rd6, 4096;
	st.global.u64 	[%rd1+16], %rd7;
	membar.gl;
	atom.exch.b32 	%r12, [%rd5], 0;
	mov.u32 	%r43, 1;
LBB18_8:                                // %_ZN11LLVMRuntime20allocate_from_bufferEmm.exit.i.i
                                        //   in Loop: Header=BB18_3 Depth=1
	cvta.global.u64 	%rd53, %rd138;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd30;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r43;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd53;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 14
	bra.uni 	LBB18_12;
LBB18_13:                               // %._crit_edge.loopexit
	ld.global.u64 	%rd147, [%rd3];
LBB18_14:                               // %._crit_edge
	st.local.v2.u32 	[%rd2+8], {%r41, %r44};
	st.local.u64 	[%rd2], %rd147;
	st.local.u64 	[%rd2+16], %rd150;
	st.local.u64 	[%rd2+24], %rd150;
	st.local.u64 	[%rd2+32], %rd150;
	st.local.u64 	[%rd2+40], %rd150;
	mul.wide.s32 	%rd78, %r7, 8;
	add.s64 	%rd79, %rd1, %rd78;
	ld.global.u64 	%rd14, [%rd79+8280];
	add.s64 	%rd80, %rd14, 1048600;
	atom.add.u32 	%r5, [%rd80], 1;
	ld.u32 	%r22, [%rd14+1048592];
	shr.s32 	%r23, %r5, %r22;
	ld.u64 	%rd81, [%rd14+1048608];
	setp.lt.u32 	%p13, %r23, 131072;
	selp.u32 	%r24, 1, 0, %p13;
	mov.u64 	%rd82, _$_str_$_6;
	cvta.global.u64 	%rd83, %rd82;
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd81;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r24;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd83;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 17
	mul.wide.s32 	%rd84, %r23, 8;
	add.s64 	%rd15, %rd14, %rd84;
	ld.u64 	%rd85, [%rd15];
	setp.ne.s64 	%p14, %rd85, 0;
	@%p14 bra 	LBB18_28;
LBB18_15:                               // =>This Inner Loop Header: Depth=1
	add.s64 	%rd86, %rd14, 1048596;
	atom.exch.b32 	%r25, [%rd86], 1;
	setp.eq.s32 	%p15, %r25, 1;
	@%p15 bra 	LBB18_15;
// %bb.16:                              // %mutex_lock_i32.exit.i.i.i.i.i.i.i.i
	membar.gl;
	ld.u64 	%rd87, [%rd15];
	setp.ne.s64 	%p16, %rd87, 0;
	@%p16 bra 	LBB18_27;
// %bb.17:
	membar.gl;
	ld.u64 	%rd16, [%rd14+1048608];
	ld.u64 	%rd88, [%rd14+1048584];
	ld.u64 	%rd89, [%rd14+1048576];
	mul.lo.s64 	%rd17, %rd89, %rd88;
	add.s64 	%rd90, %rd16, 35240;
	atom.add.u64 	%rd91, [%rd90], %rd17;
	ld.u8 	%rs5, [%rd16];
	and.b16  	%rs6, %rs5, 1;
	setp.eq.b16 	%p17, %rs6, 1;
	mov.pred 	%p18, 0;
	xor.pred  	%p19, %p17, %p18;
	not.pred 	%p20, %p19;
	@%p20 bra 	LBB18_23;
	bra.uni 	LBB18_18;
LBB18_23:
	ld.u64 	%rd111, [%rd16+32872];
	add.s64 	%rd112, %rd111, 2097152;
	atom.add.u32 	%r31, [%rd112], 1;
	setp.lt.s32 	%p23, %r31, 65537;
	selp.u32 	%r32, 1, 0, %p23;
	cvta.global.u64 	%rd114, %rd144;
	{ // callseq 20, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd16;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r32;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd114;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 20
	ld.u64 	%rd115, [%rd16+32872];
	mul.wide.s32 	%rd116, %r31, 32;
	add.s64 	%rd117, %rd115, %rd116;
	st.volatile.u64 	[%SP+0], %rd117;
	ld.volatile.u64 	%rd118, [%SP+0];
	atom.exch.b64 	%rd119, [%rd118], %rd17;
	ld.volatile.u64 	%rd120, [%SP+0];
	add.s64 	%rd121, %rd120, 8;
	atom.exch.b64 	%rd122, [%rd121], 4096;
	ld.volatile.u64 	%rd123, [%SP+0];
	ld.u64 	%rd124, [%rd123+16];
	setp.ne.s64 	%p24, %rd124, 0;
	@%p24 bra 	LBB18_25;
LBB18_24:                               // %.lr.ph.i.i.i.i.i.i.i.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	membar.sys;
	ld.volatile.u64 	%rd125, [%SP+0];
	ld.u64 	%rd126, [%rd125+16];
	setp.eq.s64 	%p25, %rd126, 0;
	@%p25 bra 	LBB18_24;
LBB18_25:                               // %._crit_edge.i.i.i.i.i.i.i.i.i.i
	ld.volatile.u64 	%rd127, [%SP+0];
	ld.u64 	%rd149, [%rd127+16];
	bra.uni 	LBB18_26;
LBB18_18:                               // =>This Inner Loop Header: Depth=1
	add.s64 	%rd92, %rd16, 35232;
	atom.exch.b32 	%r26, [%rd92], 1;
	setp.eq.s32 	%p21, %r26, 1;
	@%p21 bra 	LBB18_18;
// %bb.19:                              // %mutex_lock_i32.exit.i.i.i.i.i.i.i.i.i.i.i.i.i.i.i
	membar.gl;
	ld.u64 	%rd18, [%rd16+16];
	add.s64 	%rd93, %rd18, -1;
	or.b64  	%rd94, %rd93, -4096;
	xor.b64  	%rd19, %rd94, 4095;
	add.s64 	%rd95, %rd19, %rd17;
	add.s64 	%rd96, %rd18, %rd95;
	add.s64 	%rd20, %rd96, 4096;
	ld.u64 	%rd97, [%rd16+24];
	setp.gt.u64 	%p22, %rd20, %rd97;
	@%p22 bra 	LBB18_21;
	bra.uni 	LBB18_20;
LBB18_21:
	membar.gl;
	atom.exch.b32 	%r30, [%rd92], 0;
	cvta.global.u64 	%rd103, %rd139;
	cvta.global.u64 	%rd105, %rd140;
	cvta.global.u64 	%rd107, %rd141;
	{ // callseq 18, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd103;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd105;
	.param .b32 param2;
	st.param.b32 	[param2+0], %r41;
	.param .b64 param3;
	st.param.b64 	[param3+0], %rd107;
	.param .b64 param4;
	st.param.b64 	[param4+0], %rd142;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 18
	mov.u64 	%rd149, 0;
	mov.u32 	%r44, %r41;
	bra.uni 	LBB18_22;
LBB18_20:                               // %_Z11locked_taskIZN11LLVMRuntime20allocate_from_bufferEmmE3_dl__1EvPvRKT_.exit.i.i.i.i.i.i.i.i.i.i.i
	add.s64 	%rd98, %rd18, %rd19;
	add.s64 	%rd149, %rd98, 4096;
	st.u64 	[%rd16+16], %rd20;
	membar.gl;
	atom.exch.b32 	%r28, [%rd92], 0;
LBB18_22:                               // %_ZN11LLVMRuntime20allocate_from_bufferEmm.exit.i.i.i.i.i.i.i.i.i.i
	cvta.global.u64 	%rd110, %rd138;
	{ // callseq 19, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd16;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r44;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd110;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 19
LBB18_26:                               // %_ZN11LLVMRuntime24request_allocate_alignedEmm.exit.i.i.i.i.i.i.i.i.i
	atom.exch.b64 	%rd128, [%rd15], %rd149;
LBB18_27:                               // %_Z11locked_taskIZN11ListManager11touch_chunkEiE3_dl__8EvPvRKT_.exit.i.i.i.i
	membar.gl;
	atom.exch.b32 	%r33, [%rd86], 0;
LBB18_28:                               // %_ZN11ListManager6appendEPv.exit
	ld.u32 	%r34, [%rd14+1048592];
	shr.s32 	%r35, %r5, %r34;
	mul.wide.s32 	%rd131, %r35, 8;
	add.s64 	%rd132, %rd14, %rd131;
	ld.u64 	%rd133, [%rd132];
	ld.u64 	%rd25, [%rd14+1048576];
	mov.u32 	%r36, -1;
	shl.b32 	%r37, %r36, %r34;
	not.b32 	%r38, %r37;
	and.b32  	%r39, %r5, %r38;
	cvt.s64.s32 	%rd134, %r39;
	mul.lo.s64 	%rd135, %rd25, %rd134;
	add.s64 	%rd26, %rd133, %rd135;
	setp.eq.s64 	%p26, %rd25, 0;
	@%p26 bra 	LBB18_30;
LBB18_29:                               // %loop-memcpy-expansion
                                        // =>This Inner Loop Header: Depth=1
	add.s64 	%rd136, %rd2, %rd150;
	ld.local.u8 	%rs7, [%rd136];
	add.s64 	%rd137, %rd26, %rd150;
	st.u8 	[%rd137], %rs7;
	add.s64 	%rd150, %rd150, 1;
	setp.lt.u64 	%p27, %rd150, %rd25;
	@%p27 bra 	LBB18_29;
LBB18_30:
	ret;
                                        // -- End function
}
	// .globl	runtime_NodeAllocator_initialize // -- Begin function runtime_NodeAllocator_initialize
.visible .entry runtime_NodeAllocator_initialize(
	.param .u64 runtime_NodeAllocator_initialize_param_0,
	.param .u32 runtime_NodeAllocator_initialize_param_1,
	.param .u64 runtime_NodeAllocator_initialize_param_2
)                                       // @runtime_NodeAllocator_initialize
{
	.local .align 8 .b8 	__local_depot19[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<41>;
	.reg .b16 	%rs<9>;
	.reg .b32 	%r<54>;
	.reg .b64 	%rd<199>;

// %bb.0:
	mov.u64 	%SPL, __local_depot19;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd33, [runtime_NodeAllocator_initialize_param_2];
	ld.param.u64 	%rd32, [runtime_NodeAllocator_initialize_param_0];
	cvta.to.global.u64 	%rd1, %rd32;
	add.s64 	%rd34, %rd1, 35240;
	atom.global.add.u64 	%rd35, [%rd34], 56;
	ld.global.u8 	%rs1, [%rd1];
	and.b16  	%rs2, %rs1, 1;
	setp.eq.b16 	%p1, %rs2, 1;
	mov.pred 	%p2, 0;
	xor.pred  	%p3, %p1, %p2;
	not.pred 	%p4, %p3;
	add.s64 	%rd186, %rd1, 35232;
	mov.u64 	%rd187, _$_str_$_3;
	mov.u64 	%rd190, _$_str_$_4;
	@%p4 bra 	LBB19_7;
	bra.uni 	LBB19_1;
LBB19_7:
	ld.global.u64 	%rd52, [%rd1+32872];
	add.s64 	%rd53, %rd52, 2097152;
	atom.add.u32 	%r16, [%rd53], 1;
	setp.lt.s32 	%p7, %r16, 65537;
	selp.u32 	%r17, 1, 0, %p7;
	cvta.global.u64 	%rd55, %rd190;
	{ // callseq 23, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r17;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd55;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 23
	ld.global.u64 	%rd56, [%rd1+32872];
	mul.wide.s32 	%rd57, %r16, 32;
	add.s64 	%rd58, %rd56, %rd57;
	st.volatile.u64 	[%SP+0], %rd58;
	ld.volatile.u64 	%rd59, [%SP+0];
	atom.exch.b64 	%rd60, [%rd59], 56;
	ld.volatile.u64 	%rd61, [%SP+0];
	add.s64 	%rd62, %rd61, 8;
	atom.exch.b64 	%rd63, [%rd62], 4096;
	ld.volatile.u64 	%rd64, [%SP+0];
	ld.u64 	%rd65, [%rd64+16];
	setp.ne.s64 	%p8, %rd65, 0;
	@%p8 bra 	LBB19_9;
LBB19_8:                                // %.lr.ph.i.i
                                        // =>This Inner Loop Header: Depth=1
	membar.sys;
	ld.volatile.u64 	%rd66, [%SP+0];
	ld.u64 	%rd67, [%rd66+16];
	setp.eq.s64 	%p9, %rd67, 0;
	@%p9 bra 	LBB19_8;
LBB19_9:                                // %._crit_edge.i.i
	ld.volatile.u64 	%rd68, [%SP+0];
	ld.u64 	%rd192, [%rd68+16];
	bra.uni 	LBB19_10;
LBB19_1:
	mov.u32 	%r49, 0;
	cvta.global.u64 	%rd2, %rd186;
LBB19_2:                                // =>This Inner Loop Header: Depth=1
	atom.exch.b32 	%r11, [%rd2], 1;
	setp.eq.s32 	%p5, %r11, 1;
	@%p5 bra 	LBB19_2;
// %bb.3:                               // %mutex_lock_i32.exit.i.i.i.i.i.i.i
	membar.gl;
	ld.global.u64 	%rd37, [%rd1+16];
	add.s64 	%rd38, %rd37, -1;
	or.b64  	%rd39, %rd38, -4096;
	xor.b64  	%rd40, %rd39, 4095;
	add.s64 	%rd3, %rd37, %rd40;
	add.s64 	%rd4, %rd3, 4152;
	ld.global.u64 	%rd41, [%rd1+24];
	setp.gt.u64 	%p6, %rd4, %rd41;
	@%p6 bra 	LBB19_5;
	bra.uni 	LBB19_4;
LBB19_5:
	membar.gl;
	atom.exch.b32 	%r15, [%rd2], 0;
	mov.u64 	%rd43, _$_str;
	cvta.global.u64 	%rd44, %rd43;
	mov.u64 	%rd45, _$_str_$_1;
	cvta.global.u64 	%rd46, %rd45;
	mov.u64 	%rd47, _$_str_$_2;
	cvta.global.u64 	%rd48, %rd47;
	mov.u64 	%rd49, 1;
	{ // callseq 21, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd44;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b32 param2;
	st.param.b32 	[param2+0], %r49;
	.param .b64 param3;
	st.param.b64 	[param3+0], %rd48;
	.param .b64 param4;
	st.param.b64 	[param4+0], %rd49;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 21
	mov.u64 	%rd192, 0;
	bra.uni 	LBB19_6;
LBB19_4:                                // %_Z11locked_taskIZN11LLVMRuntime20allocate_from_bufferEmmE3_dl__1EvPvRKT_.exit.i.i.i
	add.s64 	%rd192, %rd3, 4096;
	st.global.u64 	[%rd1+16], %rd4;
	membar.gl;
	atom.exch.b32 	%r13, [%rd2], 0;
	mov.u32 	%r49, 1;
LBB19_6:                                // %_ZN11LLVMRuntime20allocate_from_bufferEmm.exit.i.i
	cvta.global.u64 	%rd51, %rd187;
	{ // callseq 22, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r49;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd51;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 22
LBB19_10:                               // %_ZN11LLVMRuntime24request_allocate_alignedEmm.exit.i
	ld.param.u32 	%r10, [runtime_NodeAllocator_initialize_param_1];
	st.u64 	[%rd192], %rd32;
	st.u32 	[%rd192+12], %rd33;
	cvt.s64.s32 	%rd9, %rd33;
	mov.u32 	%r50, 16384;
LBB19_11:                               // =>This Inner Loop Header: Depth=1
	setp.gt.u32 	%p10, %r50, 1;
	cvt.u64.u32 	%rd10, %r50;
	mul.lo.s64 	%rd69, %rd9, %rd10;
	setp.gt.u64 	%p11, %rd69, 134217728;
	and.pred  	%p12, %p10, %p11;
	shr.u32 	%r50, %r50, 1;
	@%p12 bra 	LBB19_11;
// %bb.12:
	cvt.u32.u64 	%r19, %rd10;
	mov.u32 	%r51, 0;
	st.v2.u32 	[%rd192+16], {%r19, %r51};
	atom.global.add.u64 	%rd71, [%rd34], 1048616;
	ld.global.u8 	%rs3, [%rd1];
	and.b16  	%rs4, %rs3, 1;
	setp.eq.b16 	%p13, %rs4, 1;
	xor.pred  	%p15, %p13, %p2;
	not.pred 	%p16, %p15;
	@%p16 bra 	LBB19_19;
	bra.uni 	LBB19_13;
LBB19_19:
	ld.global.u64 	%rd88, [%rd1+32872];
	add.s64 	%rd89, %rd88, 2097152;
	atom.add.u32 	%r26, [%rd89], 1;
	setp.lt.s32 	%p19, %r26, 65537;
	selp.u32 	%r27, 1, 0, %p19;
	cvta.global.u64 	%rd91, %rd190;
	{ // callseq 26, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r27;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd91;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 26
	ld.global.u64 	%rd92, [%rd1+32872];
	mul.wide.s32 	%rd93, %r26, 32;
	add.s64 	%rd94, %rd92, %rd93;
	st.volatile.u64 	[%SP+0], %rd94;
	ld.volatile.u64 	%rd95, [%SP+0];
	atom.exch.b64 	%rd96, [%rd95], 1048616;
	ld.volatile.u64 	%rd97, [%SP+0];
	add.s64 	%rd98, %rd97, 8;
	atom.exch.b64 	%rd99, [%rd98], 4096;
	ld.volatile.u64 	%rd100, [%SP+0];
	ld.u64 	%rd101, [%rd100+16];
	setp.ne.s64 	%p20, %rd101, 0;
	@%p20 bra 	LBB19_21;
LBB19_20:                               // %.lr.ph.i.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	membar.sys;
	ld.volatile.u64 	%rd102, [%SP+0];
	ld.u64 	%rd103, [%rd102+16];
	setp.eq.s64 	%p21, %rd103, 0;
	@%p21 bra 	LBB19_20;
LBB19_21:                               // %._crit_edge.i.i.i.i
	ld.volatile.u64 	%rd104, [%SP+0];
	ld.u64 	%rd194, [%rd104+16];
	bra.uni 	LBB19_22;
LBB19_13:
	cvta.global.u64 	%rd11, %rd186;
LBB19_14:                               // =>This Inner Loop Header: Depth=1
	atom.exch.b32 	%r21, [%rd11], 1;
	setp.eq.s32 	%p17, %r21, 1;
	@%p17 bra 	LBB19_14;
// %bb.15:                              // %mutex_lock_i32.exit.i.i.i.i.i.i.i.i.i
	membar.gl;
	ld.global.u64 	%rd73, [%rd1+16];
	add.s64 	%rd74, %rd73, -1;
	or.b64  	%rd75, %rd74, -4096;
	xor.b64  	%rd76, %rd75, 4095;
	add.s64 	%rd12, %rd73, %rd76;
	add.s64 	%rd13, %rd12, 1052712;
	ld.global.u64 	%rd77, [%rd1+24];
	setp.gt.u64 	%p18, %rd13, %rd77;
	@%p18 bra 	LBB19_17;
	bra.uni 	LBB19_16;
LBB19_17:
	membar.gl;
	atom.exch.b32 	%r25, [%rd11], 0;
	mov.u64 	%rd79, _$_str;
	cvta.global.u64 	%rd80, %rd79;
	mov.u64 	%rd81, _$_str_$_1;
	cvta.global.u64 	%rd82, %rd81;
	mov.u64 	%rd83, _$_str_$_2;
	cvta.global.u64 	%rd84, %rd83;
	mov.u64 	%rd85, 1;
	{ // callseq 24, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd80;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd82;
	.param .b32 param2;
	st.param.b32 	[param2+0], %r51;
	.param .b64 param3;
	st.param.b64 	[param3+0], %rd84;
	.param .b64 param4;
	st.param.b64 	[param4+0], %rd85;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 24
	mov.u64 	%rd194, 0;
	bra.uni 	LBB19_18;
LBB19_16:                               // %_Z11locked_taskIZN11LLVMRuntime20allocate_from_bufferEmmE3_dl__1EvPvRKT_.exit.i.i.i.i.i
	add.s64 	%rd194, %rd12, 4096;
	st.global.u64 	[%rd1+16], %rd13;
	membar.gl;
	atom.exch.b32 	%r23, [%rd11], 0;
	mov.u32 	%r51, 1;
LBB19_18:                               // %_ZN11LLVMRuntime20allocate_from_bufferEmm.exit.i.i.i.i
	cvta.global.u64 	%rd87, %rd187;
	{ // callseq 25, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r51;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd87;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 25
LBB19_22:                               // %_ZN11LLVMRuntime6createI11ListManagerJRPS_mRiEEEPT_DpOT0_.exit.i.i
	mov.u64 	%rd105, 4;
	st.u64 	[%rd194+1048576], %rd105;
	st.u64 	[%rd194+1048584], %rd10;
	st.u64 	[%rd194+1048608], %rd32;
	popc.b32 	%r29, %r19;
	setp.eq.s32 	%p22, %r29, 1;
	selp.u32 	%r5, 1, 0, %p22;
	mov.u64 	%rd106, _$_str_$_32;
	cvta.global.u64 	%rd107, %rd106;
	{ // callseq 27, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r5;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd107;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 27
	mov.u32 	%r52, 0;
	st.u32 	[%rd194+1048600], %r52;
	shr.u64 	%rd108, %rd10, 1;
	clz.b64 	%r30, %rd108;
	mov.u32 	%r31, 64;
	sub.s32 	%r6, %r31, %r30;
	st.v2.u32 	[%rd194+1048592], {%r6, %r52};
	st.u64 	[%rd192+24], %rd194;
	atom.global.add.u64 	%rd110, [%rd34], 1048616;
	ld.global.u8 	%rs5, [%rd1];
	and.b16  	%rs6, %rs5, 1;
	setp.eq.b16 	%p23, %rs6, 1;
	xor.pred  	%p25, %p23, %p2;
	not.pred 	%p26, %p25;
	@%p26 bra 	LBB19_29;
	bra.uni 	LBB19_23;
LBB19_29:
	ld.global.u64 	%rd127, [%rd1+32872];
	add.s64 	%rd128, %rd127, 2097152;
	atom.add.u32 	%r37, [%rd128], 1;
	setp.lt.s32 	%p29, %r37, 65537;
	selp.u32 	%r38, 1, 0, %p29;
	cvta.global.u64 	%rd130, %rd190;
	{ // callseq 30, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r38;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd130;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 30
	ld.global.u64 	%rd131, [%rd1+32872];
	mul.wide.s32 	%rd132, %r37, 32;
	add.s64 	%rd133, %rd131, %rd132;
	st.volatile.u64 	[%SP+0], %rd133;
	ld.volatile.u64 	%rd134, [%SP+0];
	atom.exch.b64 	%rd135, [%rd134], 1048616;
	ld.volatile.u64 	%rd136, [%SP+0];
	add.s64 	%rd137, %rd136, 8;
	atom.exch.b64 	%rd138, [%rd137], 4096;
	ld.volatile.u64 	%rd139, [%SP+0];
	ld.u64 	%rd140, [%rd139+16];
	setp.ne.s64 	%p30, %rd140, 0;
	@%p30 bra 	LBB19_31;
LBB19_30:                               // %.lr.ph.i.i10.i.i
                                        // =>This Inner Loop Header: Depth=1
	membar.sys;
	ld.volatile.u64 	%rd141, [%SP+0];
	ld.u64 	%rd142, [%rd141+16];
	setp.eq.s64 	%p31, %rd142, 0;
	@%p31 bra 	LBB19_30;
LBB19_31:                               // %._crit_edge.i.i12.i.i
	ld.volatile.u64 	%rd143, [%SP+0];
	ld.u64 	%rd196, [%rd143+16];
	bra.uni 	LBB19_32;
LBB19_23:
	cvta.global.u64 	%rd18, %rd186;
LBB19_24:                               // =>This Inner Loop Header: Depth=1
	atom.exch.b32 	%r32, [%rd18], 1;
	setp.eq.s32 	%p27, %r32, 1;
	@%p27 bra 	LBB19_24;
// %bb.25:                              // %mutex_lock_i32.exit.i.i.i.i.i.i.i2.i.i
	membar.gl;
	ld.global.u64 	%rd112, [%rd1+16];
	add.s64 	%rd113, %rd112, -1;
	or.b64  	%rd114, %rd113, -4096;
	xor.b64  	%rd115, %rd114, 4095;
	add.s64 	%rd19, %rd112, %rd115;
	add.s64 	%rd20, %rd19, 1052712;
	ld.global.u64 	%rd116, [%rd1+24];
	setp.gt.u64 	%p28, %rd20, %rd116;
	@%p28 bra 	LBB19_27;
	bra.uni 	LBB19_26;
LBB19_27:
	membar.gl;
	atom.exch.b32 	%r36, [%rd18], 0;
	mov.u64 	%rd118, _$_str;
	cvta.global.u64 	%rd119, %rd118;
	mov.u64 	%rd120, _$_str_$_1;
	cvta.global.u64 	%rd121, %rd120;
	mov.u64 	%rd122, _$_str_$_2;
	cvta.global.u64 	%rd123, %rd122;
	mov.u64 	%rd124, 1;
	{ // callseq 28, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd119;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd121;
	.param .b32 param2;
	st.param.b32 	[param2+0], %r52;
	.param .b64 param3;
	st.param.b64 	[param3+0], %rd123;
	.param .b64 param4;
	st.param.b64 	[param4+0], %rd124;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 28
	mov.u64 	%rd196, 0;
	bra.uni 	LBB19_28;
LBB19_26:                               // %_Z11locked_taskIZN11LLVMRuntime20allocate_from_bufferEmmE3_dl__1EvPvRKT_.exit.i.i.i3.i.i
	add.s64 	%rd196, %rd19, 4096;
	st.global.u64 	[%rd1+16], %rd20;
	membar.gl;
	atom.exch.b32 	%r34, [%rd18], 0;
	mov.u32 	%r52, 1;
LBB19_28:                               // %_ZN11LLVMRuntime20allocate_from_bufferEmm.exit.i.i5.i.i
	cvta.global.u64 	%rd126, %rd187;
	{ // callseq 29, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r52;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd126;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 29
LBB19_32:                               // %_ZN11LLVMRuntime6createI11ListManagerJRPS_mRiEEEPT_DpOT0_.exit14.i.i
	st.u64 	[%rd196+1048576], %rd105;
	st.u64 	[%rd196+1048584], %rd10;
	st.u64 	[%rd196+1048608], %rd32;
	{ // callseq 31, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r5;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd107;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 31
	mov.u32 	%r53, 0;
	st.u32 	[%rd196+1048600], %r53;
	st.v2.u32 	[%rd196+1048592], {%r6, %r53};
	st.u64 	[%rd192+32], %rd196;
	atom.global.add.u64 	%rd148, [%rd34], 1048616;
	ld.global.u8 	%rs7, [%rd1];
	and.b16  	%rs8, %rs7, 1;
	setp.eq.b16 	%p32, %rs8, 1;
	xor.pred  	%p34, %p32, %p2;
	not.pred 	%p35, %p34;
	@%p35 bra 	LBB19_39;
	bra.uni 	LBB19_33;
LBB19_39:
	ld.global.u64 	%rd165, [%rd1+32872];
	add.s64 	%rd166, %rd165, 2097152;
	atom.add.u32 	%r45, [%rd166], 1;
	setp.lt.s32 	%p38, %r45, 65537;
	selp.u32 	%r46, 1, 0, %p38;
	cvta.global.u64 	%rd168, %rd190;
	{ // callseq 34, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd168;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 34
	ld.global.u64 	%rd169, [%rd1+32872];
	mul.wide.s32 	%rd170, %r45, 32;
	add.s64 	%rd171, %rd169, %rd170;
	st.volatile.u64 	[%SP+0], %rd171;
	ld.volatile.u64 	%rd172, [%SP+0];
	atom.exch.b64 	%rd173, [%rd172], 1048616;
	ld.volatile.u64 	%rd174, [%SP+0];
	add.s64 	%rd175, %rd174, 8;
	atom.exch.b64 	%rd176, [%rd175], 4096;
	ld.volatile.u64 	%rd177, [%SP+0];
	ld.u64 	%rd178, [%rd177+16];
	setp.ne.s64 	%p39, %rd178, 0;
	@%p39 bra 	LBB19_41;
LBB19_40:                               // %.lr.ph.i.i24.i.i
                                        // =>This Inner Loop Header: Depth=1
	membar.sys;
	ld.volatile.u64 	%rd179, [%SP+0];
	ld.u64 	%rd180, [%rd179+16];
	setp.eq.s64 	%p40, %rd180, 0;
	@%p40 bra 	LBB19_40;
LBB19_41:                               // %._crit_edge.i.i26.i.i
	ld.volatile.u64 	%rd181, [%SP+0];
	ld.u64 	%rd198, [%rd181+16];
	bra.uni 	LBB19_42;
LBB19_33:
	cvta.global.u64 	%rd25, %rd186;
LBB19_34:                               // =>This Inner Loop Header: Depth=1
	atom.exch.b32 	%r40, [%rd25], 1;
	setp.eq.s32 	%p36, %r40, 1;
	@%p36 bra 	LBB19_34;
// %bb.35:                              // %mutex_lock_i32.exit.i.i.i.i.i.i.i16.i.i
	membar.gl;
	ld.global.u64 	%rd150, [%rd1+16];
	add.s64 	%rd151, %rd150, -1;
	or.b64  	%rd152, %rd151, -4096;
	xor.b64  	%rd153, %rd152, 4095;
	add.s64 	%rd26, %rd150, %rd153;
	add.s64 	%rd27, %rd26, 1052712;
	ld.global.u64 	%rd154, [%rd1+24];
	setp.gt.u64 	%p37, %rd27, %rd154;
	@%p37 bra 	LBB19_37;
	bra.uni 	LBB19_36;
LBB19_37:
	membar.gl;
	atom.exch.b32 	%r44, [%rd25], 0;
	mov.u64 	%rd156, _$_str;
	cvta.global.u64 	%rd157, %rd156;
	mov.u64 	%rd158, _$_str_$_1;
	cvta.global.u64 	%rd159, %rd158;
	mov.u64 	%rd160, _$_str_$_2;
	cvta.global.u64 	%rd161, %rd160;
	mov.u64 	%rd162, 1;
	{ // callseq 32, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd157;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd159;
	.param .b32 param2;
	st.param.b32 	[param2+0], %r53;
	.param .b64 param3;
	st.param.b64 	[param3+0], %rd161;
	.param .b64 param4;
	st.param.b64 	[param4+0], %rd162;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 32
	mov.u64 	%rd198, 0;
	bra.uni 	LBB19_38;
LBB19_36:                               // %_Z11locked_taskIZN11LLVMRuntime20allocate_from_bufferEmmE3_dl__1EvPvRKT_.exit.i.i.i17.i.i
	add.s64 	%rd198, %rd26, 4096;
	st.global.u64 	[%rd1+16], %rd27;
	membar.gl;
	atom.exch.b32 	%r42, [%rd25], 0;
	mov.u32 	%r53, 1;
LBB19_38:                               // %_ZN11LLVMRuntime20allocate_from_bufferEmm.exit.i.i19.i.i
	cvta.global.u64 	%rd164, %rd187;
	{ // callseq 33, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r53;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd164;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 33
LBB19_42:                               // %_ZN11LLVMRuntime6createI11NodeManagerJRPS_RmiEEEPT_DpOT0_.exit
	st.u64 	[%rd198+1048576], %rd9;
	st.u64 	[%rd198+1048584], %rd10;
	st.u64 	[%rd198+1048608], %rd32;
	{ // callseq 35, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r5;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd107;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 35
	mov.u32 	%r47, 0;
	st.u32 	[%rd198+1048600], %r47;
	st.v2.u32 	[%rd198+1048592], {%r6, %r47};
	st.u64 	[%rd192+40], %rd198;
	mul.wide.s32 	%rd184, %r10, 8;
	add.s64 	%rd185, %rd1, %rd184;
	st.global.u64 	[%rd185+16472], %rd192;
	ret;
                                        // -- End function
}
	// .globl	runtime_allocate_ambient // -- Begin function runtime_allocate_ambient
.visible .entry runtime_allocate_ambient(
	.param .u64 runtime_allocate_ambient_param_0,
	.param .u32 runtime_allocate_ambient_param_1,
	.param .u64 runtime_allocate_ambient_param_2
)                                       // @runtime_allocate_ambient
{
	.local .align 8 .b8 	__local_depot20[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<10>;
	.reg .b16 	%rs<3>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<52>;

// %bb.0:
	mov.u64 	%SPL, __local_depot20;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd11, [runtime_allocate_ambient_param_2];
	ld.param.u32 	%r2, [runtime_allocate_ambient_param_1];
	ld.param.u64 	%rd10, [runtime_allocate_ambient_param_0];
	cvta.to.global.u64 	%rd1, %rd10;
	add.s64 	%rd12, %rd1, 35240;
	atom.global.add.u64 	%rd13, [%rd12], %rd11;
	ld.global.u8 	%rs1, [%rd1];
	and.b16  	%rs2, %rs1, 1;
	setp.eq.b16 	%p1, %rs2, 1;
	mov.pred 	%p2, 0;
	xor.pred  	%p3, %p1, %p2;
	not.pred 	%p4, %p3;
	@%p4 bra 	LBB20_7;
	bra.uni 	LBB20_1;
LBB20_7:
	ld.global.u64 	%rd31, [%rd1+32872];
	add.s64 	%rd32, %rd31, 2097152;
	atom.add.u32 	%r8, [%rd32], 1;
	setp.lt.s32 	%p7, %r8, 65537;
	selp.u32 	%r9, 1, 0, %p7;
	mov.u64 	%rd33, _$_str_$_4;
	cvta.global.u64 	%rd34, %rd33;
	{ // callseq 38, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd10;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r9;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd34;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 38
	ld.global.u64 	%rd35, [%rd1+32872];
	mul.wide.s32 	%rd36, %r8, 32;
	add.s64 	%rd37, %rd35, %rd36;
	st.volatile.u64 	[%SP+0], %rd37;
	ld.volatile.u64 	%rd38, [%SP+0];
	atom.exch.b64 	%rd39, [%rd38], %rd11;
	ld.volatile.u64 	%rd40, [%SP+0];
	add.s64 	%rd41, %rd40, 8;
	atom.exch.b64 	%rd42, [%rd41], 128;
	ld.volatile.u64 	%rd43, [%SP+0];
	ld.u64 	%rd44, [%rd43+16];
	setp.ne.s64 	%p8, %rd44, 0;
	@%p8 bra 	LBB20_9;
LBB20_8:                                // %.lr.ph.i
                                        // =>This Inner Loop Header: Depth=1
	membar.sys;
	ld.volatile.u64 	%rd45, [%SP+0];
	ld.u64 	%rd46, [%rd45+16];
	setp.eq.s64 	%p9, %rd46, 0;
	@%p9 bra 	LBB20_8;
LBB20_9:                                // %._crit_edge.i
	ld.volatile.u64 	%rd47, [%SP+0];
	ld.u64 	%rd51, [%rd47+16];
	bra.uni 	LBB20_10;
LBB20_1:
	add.s64 	%rd14, %rd1, 35232;
	cvta.global.u64 	%rd2, %rd14;
LBB20_2:                                // =>This Inner Loop Header: Depth=1
	atom.exch.b32 	%r3, [%rd2], 1;
	setp.eq.s32 	%p5, %r3, 1;
	@%p5 bra 	LBB20_2;
// %bb.3:                               // %mutex_lock_i32.exit.i.i.i.i.i.i
	membar.gl;
	ld.global.u64 	%rd3, [%rd1+16];
	add.s64 	%rd15, %rd3, -1;
	or.b64  	%rd16, %rd15, -128;
	xor.b64  	%rd4, %rd16, 127;
	add.s64 	%rd17, %rd4, %rd11;
	add.s64 	%rd18, %rd3, %rd17;
	add.s64 	%rd5, %rd18, 128;
	ld.global.u64 	%rd19, [%rd1+24];
	setp.gt.u64 	%p6, %rd5, %rd19;
	@%p6 bra 	LBB20_5;
	bra.uni 	LBB20_4;
LBB20_5:
	membar.gl;
	atom.exch.b32 	%r7, [%rd2], 0;
	mov.u64 	%rd22, _$_str;
	cvta.global.u64 	%rd23, %rd22;
	mov.u64 	%rd24, _$_str_$_1;
	cvta.global.u64 	%rd25, %rd24;
	mov.u64 	%rd26, _$_str_$_2;
	cvta.global.u64 	%rd27, %rd26;
	mov.u32 	%r10, 0;
	mov.u64 	%rd28, 1;
	{ // callseq 36, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd23;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd25;
	.param .b32 param2;
	st.param.b32 	[param2+0], %r10;
	.param .b64 param3;
	st.param.b64 	[param3+0], %rd27;
	.param .b64 param4;
	st.param.b64 	[param4+0], %rd28;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 36
	mov.u64 	%rd51, 0;
	bra.uni 	LBB20_6;
LBB20_4:                                // %_Z11locked_taskIZN11LLVMRuntime20allocate_from_bufferEmmE3_dl__1EvPvRKT_.exit.i.i
	add.s64 	%rd20, %rd3, %rd4;
	add.s64 	%rd51, %rd20, 128;
	st.global.u64 	[%rd1+16], %rd5;
	membar.gl;
	atom.exch.b32 	%r5, [%rd2], 0;
	mov.u32 	%r10, 1;
LBB20_6:                                // %_ZN11LLVMRuntime20allocate_from_bufferEmm.exit.i
	mov.u64 	%rd29, _$_str_$_3;
	cvta.global.u64 	%rd30, %rd29;
	{ // callseq 37, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd10;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r10;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd30;
	call.uni 
	taichi_assert_format, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 37
LBB20_10:                               // %_ZN11LLVMRuntime24request_allocate_alignedEmm.exit
	mul.wide.s32 	%rd48, %r2, 8;
	add.s64 	%rd49, %rd1, %rd48;
	st.global.u64 	[%rd49+24664], %rd51;
	ret;
                                        // -- End function
}
 